{"version":3,"sources":["listing.module.css","listings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Listings","props","href","url","className","style","recipe","image","src","alt","h1","title","price","fav","App","API_KEY","useState","listings","setListings","search","setSearch","query","setQuery","useEffect","getListings","axios","require","a","get","response","console","log","data","results","x","sort","b","num_favorers","onSubmit","e","preventDefault","type","value","onChange","target","map","i","key","MainImage","url_fullxfull","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,uBAAuB,GAAK,sB,0LCqBxEC,EAnBE,SAAAC,GACf,OACE,uBAAGC,KAAMD,EAAME,KACb,yBAAKC,UAAWC,IAAMC,QACpB,yBAAKF,UAAWC,IAAME,MAAOC,IAAKP,EAAMM,MAAOE,IAAI,KACnD,wBAAIL,UAAWC,IAAMK,IAAKT,EAAMU,OAEhC,2BACE,sCADF,IACkBV,EAAMW,OAExB,2BACE,iDACCX,EAAMY,QCuDFC,MAjEf,WACE,IAAMC,EAAU,2BADH,EAGmBC,mBAAS,IAH5B,mBAGNC,EAHM,KAGIC,EAHJ,OAIeF,mBAAS,IAJxB,mBAING,EAJM,KAIEC,EAJF,OAKaJ,mBAAS,WALtB,mBAKNK,EALM,KAKCC,EALD,KAObC,oBAAU,YAPG,mCAQXC,IACC,CAACH,IAEJ,IAAMI,EAAQC,EAAQ,GAXT,2CAab,gCAAAC,EAAA,2DACgB,uCADhB,SAGyBF,EAAMG,IAAN,UAFT,uCAES,+DAC0Cb,EAD1C,qBAC8DM,EAD9D,8FAHzB,OAGQQ,EAHR,OAMEC,QAAQC,IAAIF,EAASG,KAAKC,SAEpBjC,EAAW6B,EAASG,KAAKC,QACzBC,EAAIlC,EAASmC,KAAK,SAACR,EAAGS,GAAJ,OAAUT,EAAEU,aAAeD,EAAEC,eACrDnB,EAAYgB,GAVd,0CAba,sBAkCb,OACE,yBAAK9B,UAAU,OACb,0BAAMA,UAAU,cAAckC,SAPhB,SAAAC,GAChBA,EAAEC,iBACFlB,EAASH,GACTC,EAAU,MAKN,2BACEqB,KAAK,OACLrC,UAAU,eACVsC,MAAOvB,EACPwB,SAfa,SAAAJ,GACnBnB,EAAUmB,EAAEK,OAAOF,UAgBf,4BAAQD,KAAK,SAASrC,UAAU,iBAAhC,WAIF,yBAAKA,UAAU,WACZa,EAAS4B,IAAI,SAACvC,EAAQwC,GAAT,OACZ,kBAAC,EAAD,CACEC,IAAK,UAAYD,EACjBnC,MAAOL,EAAOK,MACdC,MAAON,EAAOM,MACdT,IAAKG,EAAOH,IACZU,IAAKP,EAAO+B,aACZ9B,MAAOD,EAAO0C,UAAUC,mBApBhC,MC5BgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dc5644c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"listing_recipe__14SDz\",\"image\":\"listing_image__3TZOc\",\"h1\":\"listing_h1__2s9Fa\"};","import React from \"react\";\r\nimport style from \"./listing.module.css\";\r\n\r\nconst Listings = props => {\r\n  return (\r\n    <a href={props.url}>\r\n      <div className={style.recipe}>\r\n        <img className={style.image} src={props.image} alt=\"\" />\r\n        <h1 className={style.h1}>{props.title}</h1>\r\n\r\n        <p>\r\n          <b>Price: </b>${props.price}\r\n        </p>\r\n        <p>\r\n          <b>Num of Favorites: </b>\r\n          {props.fav}\r\n        </p>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Listings;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Listings from \"./listings\";\n\nfunction App() {\n  const API_KEY = \"gzbfz3zz36yhy3xv4lqwxn5h\";\n\n  const [listings, setListings] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getListings();\n  }, [query]);\n\n  const axios = require(\"axios\");\n\n  async function getListings() {\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    const response = await axios.get(\n      `${proxy}https://openapi.etsy.com/v2/listings/active?api_key=${API_KEY}&keywords=${query}&fields=title,num_favorers,currency_code,url,price&limit=100&includes=MainImage,favorites`\n    );\n    console.log(response.data.results);\n\n    const Listings = response.data.results;\n    const x = Listings.sort((a, b) => a.num_favorers - b.num_favorers);\n    setListings(x);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <form className=\"search_form\" onSubmit={getSearch}>\n        <input\n          type=\"text\"\n          className=\"search_input\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button type=\"submit\" className=\"search_button\">\n          Submit\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {listings.map((recipe, i) => (\n          <Listings\n            key={\"recipe_\" + i}\n            title={recipe.title}\n            price={recipe.price}\n            url={recipe.url}\n            fav={recipe.num_favorers}\n            image={recipe.MainImage.url_fullxfull}\n            //ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n      ;\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}